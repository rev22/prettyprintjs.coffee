// Generated by CoffeeScript 1.4.0
(function() {
  var prettyPrintThis, util;

  util = {
    el: function(type, attrs) {
      var attr, el, styles;
      el = document.createElement(type);
      attr = void 0;
      attrs = util.merge({}, attrs);
      if (attrs && attrs.style) {
        styles = attrs.style;
        util.applyCSS(el, attrs.style);
        delete attrs.style;
      }
      for (attr in attrs) {
        if (attrs.hasOwnProperty(attr)) {
          el[attr] = attrs[attr];
        }
      }
      return el;
    },
    applyCSS: function(el, styles) {
      var prop, _results;
      _results = [];
      for (prop in styles) {
        if (styles.hasOwnProperty(prop)) {
          try {
            _results.push(el.style[prop] = styles[prop]);
          } catch (_error) {}
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    txt: function(t) {
      return document.createTextNode(t);
    },
    row: function(cells, type, cellType) {
      var attrs, colSpan, td, tr;
      cellType = cellType || "td";
      colSpan = util.count(cells, null) + 1;
      tr = util.el("tr");
      td = void 0;
      attrs = {
        style: util.getStyles(cellType, type),
        colSpan: colSpan,
        onmouseover: function() {
          var tds;
          tds = this.parentNode.childNodes;
          return util.forEach(tds, function(cell) {
            if (cell.nodeName.toLowerCase() !== "td") {
              return;
            }
            return util.applyCSS(cell, util.getStyles("td_hover", type));
          });
        },
        onmouseout: function() {
          var tds;
          tds = this.parentNode.childNodes;
          return util.forEach(tds, function(cell) {
            if (cell.nodeName.toLowerCase() !== "td") {
              return;
            }
            return util.applyCSS(cell, util.getStyles("td", type));
          });
        }
      };
      util.forEach(cells, function(cell) {
        if (cell === null) {
          return;
        }
        td = util.el(cellType, attrs);
        if (cell.nodeType) {
          td.appendChild(cell);
        } else {
          td.innerHTML = util.shorten(cell.toString());
        }
        return tr.appendChild(td);
      });
      return tr;
    },
    hRow: function(cells, type) {
      return util.row(cells, type, "th");
    },
    table: function(headings, type) {
      var attrs, tbl, tbody, thead;
      headings = headings || [];
      attrs = {
        thead: {
          style: util.getStyles("thead", type)
        },
        tbody: {
          style: util.getStyles("tbody", type)
        },
        table: {
          style: util.getStyles("table", type)
        }
      };
      tbl = util.el("table", attrs.table);
      thead = util.el("thead", attrs.thead);
      tbody = util.el("tbody", attrs.tbody);
      if (headings.length) {
        tbl.appendChild(thead);
        thead.appendChild(util.hRow(headings, type));
      }
      tbl.appendChild(tbody);
      return {
        node: tbl,
        tbody: tbody,
        thead: thead,
        appendChild: function(node) {
          return this.tbody.appendChild(node);
        },
        addRow: function(cells, _type, cellType) {
          this.appendChild(util.row.call(util, cells, _type || type, cellType));
          return this;
        }
      };
    },
    shorten: function(str) {
      var max;
      max = prettyPrintThis.maxStringLength;
      str = str.replace(/^\s\s*|\s\s*$|\n/g, "");
      if (str.length > max) {
        return str.substring(0, max - 1) + "...";
      } else {
        return str;
      }
    },
    htmlentities: function(str) {
      return str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    },
    merge: function(target, source) {
      var a, l, property, sourceProperty;
      if (typeof target !== "object") {
        target = {};
      }
      for (property in source) {
        if (source.hasOwnProperty(property)) {
          sourceProperty = source[property];
          if (typeof sourceProperty === "object") {
            target[property] = util.merge(target[property], sourceProperty);
            continue;
          }
          target[property] = sourceProperty;
        }
      }
      a = 2;
      l = arguments_.length;
      while (a < l) {
        util.merge(target, arguments_[a]);
        a++;
      }
      return target;
    },
    count: function(arr, item) {
      var count, i, l;
      count = 0;
      i = 0;
      l = arr.length;
      while (i < l) {
        if (arr[i] === item) {
          count++;
        }
        i++;
      }
      return count;
    },
    thead: function(tbl) {
      return tbl.getElementsByTagName("thead")[0];
    },
    forEach: function(arr, max, fn) {
      var index, len;
      if (!fn) {
        fn = max;
      }
      len = arr.length;
      index = -1;
      if ((function() {
        var _results;
        _results = [];
        while (++index < len) {
          _results.push(fn(arr[index], index, arr) === false);
        }
        return _results;
      })()) {
        break;
      }
      return true;
    },
    type: function(v) {
      var oType;
      try {
        if (v === null) {
          return "null";
        }
        if (v === undefined) {
          return "undefined";
        }
        oType = Object.prototype.toString.call(v).match(/\s(.+?)\]/)[1].toLowerCase();
        if (v.nodeType) {
          if (v.nodeType === 1) {
            return "domelement";
          }
          return "domnode";
        }
        if (/^(string|number|array|regexp|function|date|boolean)$/.test(oType)) {
          return oType;
        }
        if (typeof v === "object") {
          return (v.jquery && typeof v.jquery === "string" ? "jquery" : "object");
        }
        if (v === window || v === document) {
          return "object";
        }
        return "default";
      } catch (e) {
        return "default";
      }
    },
    within: function(ref) {
      return {
        is: function(o) {
          var i;
          for (i in ref) {
            if (ref[i] === o) {
              return i;
            }
          }
          return "";
        }
      };
    },
    common: {
      circRef: function(obj, key, settings) {
        return util.expander("[POINTS BACK TO <strong>" + key + "</strong>]", "Click to show this item anyway", function() {
          return this.parentNode.appendChild(prettyPrintThis(obj, {
            maxDepth: 1
          }));
        });
      },
      depthReached: function(obj, settings) {
        return util.expander("[DEPTH REACHED]", "Click to show this item anyway", function() {
          try {
            return this.parentNode.appendChild(prettyPrintThis(obj, {
              maxDepth: 1
            }));
          } catch (e) {
            return this.parentNode.appendChild(util.table(["ERROR OCCURED DURING OBJECT RETRIEVAL"], "error").addRow([e.message]).node);
          }
        });
      }
    },
    getStyles: function(el, type) {
      type = prettyPrintThis.settings.styles[type] || {};
      return util.merge({}, prettyPrintThis.settings.styles["default"][el], type[el]);
    },
    expander: function(text, title, clickFn) {
      return util.el("a", {
        innerHTML: util.shorten(text) + " <b style=\"visibility:hidden;\">[+]</b>",
        title: title,
        onmouseover: function() {
          return this.getElementsByTagName("b")[0].style.visibility = "visible";
        },
        onmouseout: function() {
          return this.getElementsByTagName("b")[0].style.visibility = "hidden";
        },
        onclick: function() {
          this.style.display = "none";
          clickFn.call(this);
          return false;
        },
        style: {
          cursor: "pointer"
        }
      });
    },
    stringify: function(obj) {
      var first, i, str, type;
      type = util.type(obj);
      str = void 0;
      first = true;
      if (type === "array") {
        str = "[";
        util.forEach(obj, function(item, i) {
          return str += (i === 0 ? "" : ", ") + util.stringify(item);
        });
        return str + "]";
      }
      if (typeof obj === "object") {
        str = "{";
        for (i in obj) {
          if (obj.hasOwnProperty(i)) {
            str += (first ? "" : ", ") + i + ":" + util.stringify(obj[i]);
            first = false;
          }
        }
        return str + "}";
      }
      if (type === "regexp") {
        return "/" + obj.source + "/";
      }
      if (type === "string") {
        return "\"" + obj.replace(/"/g, "\\\"") + "\"";
      }
      return obj.toString();
    },
    headerGradient: (function() {
      var canvas, cx, dataURL, linearGrad;
      canvas = document.createElement("canvas");
      if (!canvas.getContext) {
        return "";
      }
      cx = canvas.getContext("2d");
      canvas.height = 30;
      canvas.width = 1;
      linearGrad = cx.createLinearGradient(0, 0, 0, 30);
      linearGrad.addColorStop(0, "rgba(0,0,0,0)");
      linearGrad.addColorStop(1, "rgba(0,0,0,0.25)");
      cx.fillStyle = linearGrad;
      cx.fillRect(0, 0, 1, 30);
      dataURL = canvas.toDataURL && canvas.toDataURL();
      return "url(" + (dataURL || "") + ")";
    })()
  };

  prettyPrintThis = function(obj, options) {
    var config, container, currentDepth, hasRunOnce, settings, stack, typeDealer;
    options = options || {};
    settings = util.merge({}, prettyPrintThis.config, options);
    container = util.el("div");
    config = prettyPrintThis.config;
    currentDepth = 0;
    stack = {};
    hasRunOnce = false;
    prettyPrintThis.settings = settings;
    typeDealer = {
      string: function(item) {
        return util.txt("\"" + util.shorten(item.replace(/"/g, "\\\"")) + "\"");
      },
      number: function(item) {
        return util.txt(item);
      },
      regexp: function(item) {
        var flags, miniTable, span;
        miniTable = util.table(["RegExp", null], "regexp");
        flags = util.table();
        span = util.expander("/" + item.source + "/", "Click to show more", function() {
          return this.parentNode.appendChild(miniTable.node);
        });
        flags.addRow(["g", item.global]).addRow(["i", item.ignoreCase]).addRow(["m", item.multiline]);
        miniTable.addRow(["source", "/" + item.source + "/"]).addRow(["flags", flags.node]).addRow(["lastIndex", item.lastIndex]);
        if (settings.expanded) {
          return miniTable.node;
        } else {
          return span;
        }
      },
      domelement: function(element, depth) {
        var elname, miniTable, props;
        miniTable = util.table(["DOMElement", null], "domelement");
        props = ["id", "className", "innerHTML", "src", "href"];
        elname = element.nodeName || "";
        miniTable.addRow(["tag", "&lt;" + elname.toLowerCase() + "&gt;"]);
        util.forEach(props, function(prop) {
          if (element[prop]) {
            return miniTable.addRow([prop, util.htmlentities(element[prop])]);
          }
        });
        if (settings.expanded) {
          return miniTable.node;
        } else {
          return util.expander("DOMElement (" + elname.toLowerCase() + ")", "Click to show more", function() {
            return this.parentNode.appendChild(miniTable.node);
          });
        }
      },
      domnode: function(node) {
        var data, miniTable;
        miniTable = util.table(["DOMNode", null], "domelement");
        data = util.htmlentities((node.data || "UNDEFINED").replace(/\n/g, "\\n"));
        miniTable.addRow(["nodeType", node.nodeType + " (" + node.nodeName + ")"]).addRow(["data", data]);
        if (settings.expanded) {
          return miniTable.node;
        } else {
          return util.expander("DOMNode", "Click to show more", function() {
            return this.parentNode.appendChild(miniTable.node);
          });
        }
      },
      jquery: function(obj, depth, key) {
        return typeDealer["array"](obj, depth, key, true);
      },
      object: function(obj, depth, key) {
        var i, isEmpty, item, j, keys, len, ret, stackKey, table, type;
        stackKey = util.within(stack).is(obj);
        if (stackKey) {
          return util.common.circRef(obj, stackKey, settings);
        }
        stack[key || "TOP"] = obj;
        if (depth === settings.maxDepth) {
          return util.common.depthReached(obj, settings);
        }
        table = util.table(["Object", null], "object");
        isEmpty = true;
        keys = [];
        for (i in obj) {
          if (obj.hasOwnProperty(i)) {
            keys.push(i);
          }
        }
        if (settings.sortKeys) {
          keys.sort();
        }
        len = keys.length;
        j = 0;
        while (j < len) {
          i = keys[j];
          if (!obj.hasOwnProperty || obj.hasOwnProperty(i)) {
            item = obj[i];
            type = util.type(item);
            isEmpty = false;
            try {
              table.addRow([i, typeDealer[type](item, depth + 1, i)], type);
            } catch (e) {
              if (window.console && window.console.log) {
                console.log(e.message);
              }
            }
          }
          j++;
        }
        if (isEmpty) {
          table.addRow(["<small>[empty]</small>"]);
        } else {
          table.thead.appendChild(util.hRow(["key", "value"], "colHeader"));
        }
        ret = (settings.expanded || hasRunOnce ? table.node : util.expander(util.stringify(obj), "Click to show more", function() {
          return this.parentNode.appendChild(table.node);
        }));
        hasRunOnce = true;
        return ret;
      },
      array: function(arr, depth, key, jquery) {
        var count, isEmpty, me, stackKey, table;
        stackKey = util.within(stack).is(arr);
        if (stackKey) {
          return util.common.circRef(arr, stackKey);
        }
        stack[key || "TOP"] = arr;
        if (depth === settings.maxDepth) {
          return util.common.depthReached(arr);
        }
        me = (jquery ? "jQuery" : "Array");
        table = util.table([me + "(" + arr.length + ")", null], (jquery ? "jquery" : me.toLowerCase()));
        isEmpty = true;
        count = 0;
        if (jquery) {
          table.addRow(["selector", arr.selector]);
        }
        util.forEach(arr, function(item, i) {
          if (settings.maxArray >= 0 && ++count > settings.maxArray) {
            table.addRow([i + ".." + (arr.length - 1), typeDealer[util.type(item)]("...", depth + 1, i)]);
            return false;
          }
          isEmpty = false;
          return table.addRow([i, typeDealer[util.type(item)](item, depth + 1, i)]);
        });
        if (!jquery) {
          if (isEmpty) {
            table.addRow(["<small>[empty]</small>"]);
          } else {
            table.thead.appendChild(util.hRow(["index", "value"], "colHeader"));
          }
        }
        if (settings.expanded) {
          return table.node;
        } else {
          return util.expander(util.stringify(arr), "Click to show more", function() {
            return this.parentNode.appendChild(table.node);
          });
        }
      },
      "function": function(fn, depth, key) {
        var args, argsTable, body, miniTable, stackKey;
        stackKey = util.within(stack).is(fn);
        if (stackKey) {
          return util.common.circRef(fn, stackKey);
        }
        stack[key || "TOP"] = fn;
        miniTable = util.table(["Function", null], "function");
        argsTable = util.table(["Arguments"]);
        args = fn.toString().match(/\((.+?)\)/);
        body = fn.toString().match(/\(.*?\)\s+?\{?([\S\s]+)/)[1].replace(/\}?$/, "");
        miniTable.addRow(["arguments", (args ? args[1].replace(/[^\w_,\s]/g, "") : "<small>[none/native]</small>")]).addRow(["body", body]);
        if (settings.expanded) {
          return miniTable.node;
        } else {
          return util.expander("function(){...}", "Click to see more about this function.", function() {
            return this.parentNode.appendChild(miniTable.node);
          });
        }
      },
      date: function(date) {
        var miniTable, sDate;
        miniTable = util.table(["Date", null], "date");
        sDate = date.toString().split(/\s/);
        miniTable.addRow(["Time", sDate[4]]).addRow(["Date", sDate.slice(0, 4).join("-")]);
        if (settings.expanded) {
          return miniTable.node;
        } else {
          return util.expander("Date (timestamp): " + (+date), "Click to see a little more info about this date", function() {
            return this.parentNode.appendChild(miniTable.node);
          });
        }
      },
      boolean: function(bool) {
        return util.txt(bool.toString().toUpperCase());
      },
      undefined: function() {
        return util.txt("UNDEFINED");
      },
      "null": function() {
        return util.txt("NULL");
      },
      "default": function() {
        return util.txt("prettyPrint: TypeNotFound Error");
      }
    };
    container.appendChild(typeDealer[(settings.forceObject ? "object" : util.type(obj))](obj, currentDepth));
    return container;
  };

  prettyPrintThis.config = {
    expanded: true,
    sortKeys: false,
    forceObject: false,
    maxDepth: 3,
    maxStringLength: 40,
    maxArray: -1,
    styles: {
      array: {
        th: {
          backgroundColor: "#6DBD2A",
          color: "white"
        }
      },
      "function": {
        th: {
          backgroundColor: "#D82525"
        }
      },
      regexp: {
        th: {
          backgroundColor: "#E2F3FB",
          color: "#000"
        }
      },
      object: {
        th: {
          backgroundColor: "#1F96CF"
        }
      },
      jquery: {
        th: {
          backgroundColor: "#FBF315"
        }
      },
      error: {
        th: {
          backgroundColor: "red",
          color: "yellow"
        }
      },
      domelement: {
        th: {
          backgroundColor: "#F3801E"
        }
      },
      date: {
        th: {
          backgroundColor: "#A725D8"
        }
      },
      colHeader: {
        th: {
          backgroundColor: "#EEE",
          color: "#000",
          textTransform: "uppercase"
        }
      },
      "default": {
        table: {
          borderCollapse: "collapse",
          width: "100%"
        },
        td: {
          padding: "5px",
          fontSize: "12px",
          backgroundColor: "#FFF",
          color: "#222",
          border: "1px solid #000",
          verticalAlign: "top",
          fontFamily: "\"Consolas\",\"Lucida Console\",Courier,mono",
          whiteSpace: "nowrap"
        },
        td_hover: {},
        th: {
          padding: "5px",
          fontSize: "12px",
          backgroundColor: "#222",
          color: "#EEE",
          textAlign: "left",
          border: "1px solid #000",
          verticalAlign: "top",
          fontFamily: "\"Consolas\",\"Lucida Console\",Courier,mono",
          backgroundImage: util.headerGradient,
          backgroundRepeat: "repeat-x"
        }
      }
    }
  };

  this.prettyPrint = prettyPrintThis;

}).call(this);
